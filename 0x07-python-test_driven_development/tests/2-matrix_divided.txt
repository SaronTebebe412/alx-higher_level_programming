The ``2-matrix_divided`` module
======================

Using ``matrix_divided``
-------------------

Import ``matrix_divided`` from the ``2-matrix_divided`` module:

0-add_integer.txt >>> matrix_divided = __import__(2-matrix_divided).matrix_divided

Test div as non integer/float:

0-add_integer.txt >>> matrix = [[1, 2, 3], [4, 5, 6]]
0-add_integer.txt >>> matrix_divided(matrix, "string")
0-add_integer.txt Traceback (most recent call last):
0-add_integer.txt TypeError: div must be a number

Test div as 0:

0-add_integer.txt >>> matrix = [[1, 2, 3], [4, 5, 6]]
0-add_integer.txt >>> matrix_divided(matrix, 0)
0-add_integer.txt Traceback (most recent call last):
0-add_integer.txt ZeroDivisionError: division by zero

Test non list argument:

0-add_integer.txt >>> matrix = "Not a matrix"
0-add_integer.txt >>> matrix_divided(matrix, 2)
0-add_integer.txt Traceback (most recent call last):
0-add_integer.txt TypeError: matrix must be a matrix (list of lists) of integers/floats

Test empty list:

0-add_integer.txt >>> matrix = []
0-add_integer.txt >>> matrix_divided(matrix, 2)
0-add_integer.txt Traceback (most recent call last):
0-add_integer.txt TypeError: matrix must be a matrix (list of lists) of integers/floats

Test list containing non list elements:

0-add_integer.txt >>> matrix = ["Not", "list", 4]
0-add_integer.txt >>> matrix_divided(matrix, 2)
0-add_integer.txt Traceback (most recent call last):
0-add_integer.txt TypeError: matrix must be a matrix (list of lists) of integers/floats

Test list containing lists with no elements:

0-add_integer.txt >>> matrix = [[], []]
0-add_integer.txt >>> matrix_divided(matrix, 2)
0-add_integer.txt Traceback (most recent call last):
0-add_integer.txt TypeError: matrix must be a matrix (list of lists) of integers/floats

Test list containing lists with varying amount of elements:

0-add_integer.txt >>> matrix = [[1, 3], [1]]
0-add_integer.txt >>> matrix_divided(matrix, 2)
0-add_integer.txt Traceback (most recent call last):
0-add_integer.txt TypeError: Each row of the matrix must have the same size

Test list containing lists with non integer/float elements:

0-add_integer.txt >>> matrix = [["not", "a"], ["integer", "float"]]
0-add_integer.txt >>> matrix_divided(matrix, 2)
0-add_integer.txt Traceback (most recent call last):
0-add_integer.txt TypeError: matrix must be a matrix (list of lists) of integers/floats

Test list containing lists with just integers:

0-add_integer.txt >>> matrix = [[1, 2, 3], [4, 5, 6]]
0-add_integer.txt >>> matrix_divided(matrix, 3)
0-add_integer.txt [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Test list containing lists with just floats:

0-add_integer.txt >>> matrix = [[1.3, 2.5, 3.4], [4.3, 5.8, 6.9]]
0-add_integer.txt >>> matrix_divided(matrix, 3)
0-add_integer.txt [[0.43, 0.83, 1.13], [1.43, 1.93, 2.3]]

Test with overflow

0-add_integer.txt >>> matrix = [[1, 2, 3]]
0-add_integer.txt >>> matrix_divided(matrix, 3.0 ** 1024)
0-add_integer.txt ... # doctest: +ELLIPSIS
0-add_integer.txt Traceback (most recent call last):
0-add_integer.txt OverflowError: ...

0-add_integer.txt >>> matrix = [[1., 2., 3.]]
0-add_integer.txt >>> matrix_divided(matrix, 3.0 ** 1024)
0-add_integer.txt ... # doctest: +ELLIPSIS
0-add_integer.txt Traceback (most recent call last):
0-add_integer.txt OverflowError: ...

Test with div being float(inf):

0-add_integer.txt >>> matrix = [[1, 2, 3,]]
0-add_integer.txt >>> matrix_divided(matrix, float(inf))
0-add_integer.txt [[0.0, 0.0, 0.0]]

0-add_integer.txt >>> matrix = [[1.1, 2.2, 3.3,]]
0-add_integer.txt >>> matrix_divided(matrix, float(inf))
0-add_integer.txt [[0.0, 0.0, 0.0]]


Test list containing lists with floats/integers:

        >>> matrix = [[1.3, 2, 3.4], [4, 5.8, 6]]
0-add_integer.txt >>> matrix_divided(matrix, 3)
0-add_integer.txt [[0.43, 0.67, 1.13], [1.33, 1.93, 2.0]]

Test list containing one list:

0-add_integer.txt >>> matrix = [[1, 2, 3]]
        >>> matrix_divided(matrix, 3)
0-add_integer.txt [[0.33, 0.67, 1.0]]

Test with no arguments:

0-add_integer.txt >>> matrix_divided()
0-add_integer.txt Traceback (most recent call last):
0-add_integer.txt TypeError: matrix_divided() missing 2 required positional arguments: matrix and div

Test with only one argument:

0-add_integer.txt >>> matrix_divided(matrix)
0-add_integer.txt Traceback (most recent call last):
0-add_integer.txt TypeError: matrix_divided() missing 1 required positional argument: div
